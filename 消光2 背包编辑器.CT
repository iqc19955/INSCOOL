<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="42">
  <Forms>
    <PackEdit Class="TCEForm" Encoding="Ascii85">-CIqJ8(?5l58LC9U9Y#hiP8Yk/Ny,:-K?QvP101fJKjwb.q02*O*3tAS/hR0+x4CtX12+9goK1pFCZZSD*a)XMN!oQLfi?zj@$8@J0Ni(Ck{^PrK/4Wy!U42y%}STZUm8^+yA[/[xpdm_JVEH,t(o4-Mq1]wClS!9QQci*H[GJhUsS-.Lw,UDCBMev*l9KFUoS.:{TY9-Zc%sC+RF3Zg,h16.O9/-+qfyp@n}a]Hri1L2:va[jJtywozD$KHt%.6CnRZC}1ys0Jr6zT0mJm?LJ_KK-,PwyQZzw@{cU9cCLVcsEFo5-7/mghd4[3JH=T$JC?@SR@NYDShxYftkrwE,XB8*enG2kRBQL?H?9DG=Y4^fN3;W]I,kWZ]la9+rY!xd5PaLyk3lZ.9Q:ddXqtYfrznU08_DLG/o4{W($,KGQ#sv3QbUjOO}+44bfw(PS^*YvyAELjcM/*1%Wmu5k+2#!-t*Ju]{)O?Y{6Zffa?V^mD/_,,Sb}-kcWC];Nc/^0a6X[?]CG{+hV![h!pDMS+#C%:.P(VQ3J04D/%v@Y_pY^gUd(XquA74[yT(C($so1eWWu/5Xu3;F4g;UvwmAQ=bs8HG*Iws8Y8[xkT$YKY(qx,WwCu1:zU1N*dNsx,jghtxLzr%AHjEW]Vk[f:tnOiN[qWAb9}:97Dj[FWAK]{W8QWQkms4XWgFmuB+ytFv=,_m[AMVAhoGoQX3/lRmFve6BiEf(xyCmitl]U=hCh-9Ygoy3tUbpDESQfZPRX(ek%p@6gaki!0_?yNeiAHWWJctPO!:nC8AK6s*G$3=a};2M8WIxvhPf$IZvKh6DH3kJDUQHaM0AKYg:Ki@fCV}84e*r_(}ToNcH)}Gp$?WR-jK]8H,/gY=}4N%[;CMl.^r97;L}rE2?*Hl5P:h8#u$,f4KartkK=k,_A1BgJMv(l,u_)k1J:@skw.LDsg5z2xOCCx4gCOEdGasWbb*LtRf0Xw.ytD3L,0^dKGAL8@iLVmf]B3v.:8zu@d2n26jv$5a^/Mt2p2yVMp?W,:ACJS2Yybh:AoIjeBJdWu;e0dfZc[-g:O=JdI!.AH)-9k!7g^]X@v$eXH)zRPM_Zh%NpVe?wDCVTc=/)Ym{!a5l]}ph-#!SMb0Q#jagJm9ScSr$Ffj;+_)v#I!DTq77]5{#LX+GPl5bfTgL_fhR7/2+t;K!,+xS;-R//A8K9q}KtHYfdLOUDWd9tJJ)ocu$;s2]!5%rHva0wfDx.qY5u.L]svuXv];7?br]j.aNBR[IpwFZaL:wQf_2+@_ui{ID8G6tra*RUeHCYf!5KFxWIxt#3Sj8U?otHdt%kBZ!/Xp3KCa_%xNKk!O3^{0;=g1;Z1Kl$[s-gS3YGNY5P!C/[Sap2)HCW]0.3mIMo%i]PRQR[kB2b2};;M9BkmWP:fH0w_;2L%1HO+JZ(rzN$aZM/?wtip%BR?)dmGSUpu=xwdfSq;os,;N8gC}EUV+7(-;f;C}b@5@dPdO#9XOTw_[clwzO#!:]t}kECNt03Nf;wDIqo=BuEf,@!.7-(Hi2{YD0RE+!0N*D%XVB[N?s]7VCP1nr/.#0NNoHeIE,Jpy4yO{vwA{:-@C[lSt*(L)mkHcn2zPP!f$!=-[TeEciaah7B+_^3k)GZ,quSR)x)kG(,5+5B8equ6y[3Yr#[^FK]qNu$;fIi(p;I-6PrdS#3O$ty4i7/*x2g8Y?d5N*(Y]N4P2s9*z[2{T4pG[+h/N,9by@rt=gf%iY_S;Ipwg,trGuoH;iB+o%#p)*:CHU}yS904YrR@#60w=?0jok/c3g^()!/x@d-%OKM(z)X[}ISYGohm(Qj:X7l[](t3JWY]uH,5VD*iK]N7a^uvDW5VKaSg5!J=SBuQH:jbZALeo35nWm]O;OYP1@?mUPoM7dB;B@3Ac6fYLaGw-3^{QuLA3.)rg)mqn(-[?flc?w^f8fW8X{tGaEdC.hIg8$j)t-?_hFp{:tXJ86[3oR%M(mX[,8*/kFgwqtPN5GMua2^#Xg395oh0q44bwJin;s/oC6]R^rn$v7vfbNM8dR]0}QWZ1,YLm/BzrKrpG6Bliv9#BPaVLV:*RO)0_Fh7JcX]]GQD;@4KrHQmbw*uTjnOsIWj_B?Z*q#OYHB7H;;8D.0.vLuQnzn955H1lrP:bwtQ6PC%p:0fUL.b_@hu14-d7Km0Dp=r)eCSd-2Lu39i[[3u-X-P^PaSi@3TJ9E]}SOzbHdWDVZJ^W)oOBP$kbLSGF$bCH9V7IY{AVsUO=h*Sq;=B^zJXV,d^BIlkD*G6x#u:[82e1#pfTfZsgrLxDh!ep)Y.jl9):{pG87irROouMB0%gZmL_?sF+zJspRWox}sY%K7Lmf;%2VCV6aDBXobQz0^Gc!.HNdAFD5sfsu=ZDOUPx0W;oa+5;us9B{}+4Je!}$yb=S3aU=6u;X-TkbYfVbUuU6s$$A#A9*^(y3U#hgDGO_.G^ryiQu*+brF95pg^91*$OtKJYI9hn%p5?4(sHy},sDU[,HmwirENZl06Qn^C),p!?iCHX8yk@JmuFat76Wbuck1og?+}ZsQ%_]mP.RXBhJ)ER@w!+J;y!^J(!;.TUrZpTXLB)zw2](KZkFg^F^d$c7@[3=mYN}9B0O69foUagml7l_4^uq.u0xPXBnhTu9/()}6+5vYpn6[R7Ba/FU%zh$eK02Dkgm[YZpnr:zp[h#@X._.(ibWljR^K4+_)KQ+q5p=cO{j6fUkzk=(!yQ7c?_{1S^,)LTdgq4:zQ?Wo[PE?.yTNb9__BaW]m_!V+i;Eh{u3c3c2Mwd%na:Om4@iUi9gce%D%yBcdK:H@j?Yz)V+CvJmNs/?db^}+1xiFd*V0jhxoj%::zi]xt0NU{qk;,!1mOr4qtOwS#:iyM:8m$$gmobK_iNGA9t6}8rBp+;Ym#6T^GkoTOO/8C?uYNua}hRpUH70Y@FI5TWSMF]o5DsOTLY-NhHeuX8;/+!+]K,k,LcBc/Zfj+dD_8a9v_8e.E,GFZRvbXwyiP3T[tSR_R^qM{-QeR+%Lm43QYr?o+p_OikN.5es65YGeHL=0jx-!OGN8$gdJ#]hcoga5fW,Fe5I:ewykMRq8]EAa%6:yWNF=L7vd;Xc=CphH91P3CVHo,nPnrlT{PwSeGKfy7po;YeENyX.?hN{/z^LU0Uf0Y-0!s#bdg$.gtY]veIcG4utDL=t{yg2;j1IH;i/-m-J2x-20?Dyr!,$mIUB6^;pD(2S5HeftXm*mt$KlBqf#U,RlQb!g)^cZ8pPkh;#mF4Usbg7^Q?_wZ$?es9-9k7$954RNLKS[?]VOiM=[}eh.hte!YEC;G_fN:t_[(5eGsp6xQ:zS@+]L]2JTt2eqnFe{AOV!jDGP4}AV=l;+@9.ZH1k,)Mn^ft(whhuKSd!T..9sQ#12SCvXz0t}rW3$s%B;:A7XKKHdy:ui0l:4^Z6]pUO%eDG=LWQA/qHc+gMn+7;V3:PB8Q_V8]O.FZcB9yE]]V42kuSNAUFD#B-Y_71ID.X,u)CK/]Axe6Eq(463(1L0-Mdyv?;==CBG%GdXR{+c_A7(fY%2%)oAMOAhTh(NmgI,=!mTY=Z7NPei4?*38,E/p$@[iJS+%T931X*5XJ63^L4${mN;SQ)Ced7olDs(c}clKotXcPh+ABUE176S^6(Q73G_Zc.kU+bX:lxHy8e)L^1+</PackEdit>
    <LanguageSwitch Class="TCEForm" Encoding="Ascii85">osqvz!!QtsLjrZ%luj(6yg@lp#EP1zrAP%T5]n}08RuxMy1vM9DQrxzup#jlFtaf8A[!I/0jDYdnaFmr(%f]!yRa:Q=6vD8@jmFIqiUDR!I%ypm}hSF]7Ru5r^WYkzz4B+t{G_S#Ce:sIN+[v=bF33*BFT^lv/%6=t6P5r0b!IKy5LUscX%uK%WU9g].![B?mw]nxiZf-]gs[.2]x!nw![Nuu9v,*clyL05qv=dX2T!M(Iu:[kvbf(JR)bB7[M}P(Ra?_MJ*D+V44wp)7}FZ/sId:w*+fa-6jJDMY0nCgWrqBLkU=nq!T^9.Q5[B-I21rU0aGkU%X4F.2E+NYkN56*C2:DJJwREqDFyKBzPsj5KQX,Ip;Sm5g6,tToC^MNCfh,U1#DdpVP9FU^OWA9@Y.cjr$J+H8Di(o]F}]G[tP1[p*5vUjEN#D-,$]{X:?qNW#$AwAm7*=l^(CldUPbodL2wB$hWH2xP2^G@#PIBx</LanguageSwitch>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Pack Editor"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{ Game Executable                 : DyingLightGame_x64_rwdi.exe
  Executable Version              : 1.12.2.0 - 1.19.x after
  Module Version                  :
  Scripts Version                 : 2.0
  Date     		   	              : 2024-11-19
  Basic framework Author(from DL1): ray2160
  DL2 Version Author              : IMIG
}
aobscanmodule(ItemEditDataAOB,gamedll_ph_x64_rwdi.dll,48 8B ** 48 8B ** ** ** ** ** 48 8B ** FF 90 ** ** 00 00 45 ** ** 48 ** 54 24 ** 4C)
aobscanmodule(BaseItemTableAOB,gamedll_ph_x64_rwdi.dll,48 8B 49 ** 48 B8 FF FF FF FF FF FF 00 00 48 23 C8 4C ** ** D1 49)
alloc(newmem,200,gamedll_ph_x64_rwdi.dll)
alloc(BaseItemData,0x10)
label(ItemEditDataAOB_Bytes)
label(BaseItemTableAOB_Bytes)
label(ItemEditDataAOB_mem)
label(BaseItemTableAOB_mem)
label(ItemEditData)
registersymbol(ItemEditDataAOB_Bytes)
registersymbol(BaseItemTableAOB_Bytes)
registersymbol(ItemEditDataAOB)
registersymbol(BaseItemTableAOB)
registersymbol(ItemEditDataAOB_mem)
registersymbol(BaseItemTableAOB_mem)
registersymbol(ItemEditData)
registersymbol(BaseItemData)

newmem:
ItemEditDataAOB_Bytes:
  readMem(ItemEditDataAOB, 10)
BaseItemTableAOB_Bytes:
  readMem(BaseItemTableAOB, 14)

BaseItemTableAOB_mem:
  mov [BaseItemData+8],eax//i32 ItemFind
  readMem(BaseItemTableAOB, 4)//mov rcx,[rcx+?]
  mov rax,0000FFFFFFFFFFFF
  and rcx,rax
  mov [BaseItemData],rcx
  jmp BaseItemTableAOB+11

ItemEditDataAOB_mem:
  mov [ItemEditData],rdi
  readMem(ItemEditDataAOB, 10)
  jmp ItemEditDataAOB+A
  align 8
ItemEditData:


ItemEditDataAOB:
  jmp ItemEditDataAOB_mem
  nop 5

BaseItemTableAOB:
  jmp BaseItemTableAOB_mem
  nop 9


[DISABLE]
ItemEditDataAOB:
//db 48 8B 07 48 8B 98 90 00 00 00
  readMem(ItemEditDataAOB_Bytes, 10)
BaseItemTableAOB:
  //db 48 8B 49 F0 48 B8 FF FF FF FF FF FF 00 00
  readMem(BaseItemTableAOB_Bytes, 14)
dealloc(newmem)
dealloc(BaseItemData)
unregistersymbol(ItemEditDataAOB_Bytes)
unregistersymbol(BaseItemTableAOB_Bytes)
unregistersymbol(ItemEditDataAOB)
unregistersymbol(BaseItemTableAOB)
unregistersymbol(ItemEditDataAOB_mem)
unregistersymbol(BaseItemTableAOB_mem)
unregistersymbol(ItemEditData)
unregistersymbol(BaseItemData)
{
48 8B 07                 - mov rax,[rdi]
48 8B 98 90 00 00 00     - mov rbx,[rax+00000090]
48 8B 01                 - mov rax,[rcx]
FF 90 58 02 00 00        - call qword ptr [rax+00000258]
45 33 C9                 - xor r9d,r9d
48 8D 54 24 20           - lea rdx,[rsp+20]
4C 8B C0                 - mov r8,rax
48 8B CF                 - mov rcx,rdi
FF D3                    - call rbx
}
{
Baseitem
4b  mov 48
10b mov 48
3b  and 48 decode get addr
4b  mov 4C
3b  mov - 49
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Show Form"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
LuaCall(BPEditorShow())
 
 
[DISABLE]
LuaCall(BPEditorHide())
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Language"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
LuaCall(LanguageSwitch.show())
 
 
[DISABLE]
LuaCall(LanguageSwitch.close())
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>controlMainForm = getMainForm()
control_setCaption(controlMainForm , "Dying Light 2 Backpack Editor Steam Edition")

function addCompactMenu()
    if not compactmenualreadyexists then
        local parent = controlMainForm.Menu.Items
        compactmenuitem = createMenuItem(parent)
        parent.add(compactmenuitem)
        compactmenuitem.Caption = 'Cheat Engine'
        compactmenuitem.OnClick = cycleFullCompact
    end
end

function cycleFullCompact(sender)
    compactmenualreadyexists = true
    controlMainForm.Splitter1.Visible = not(controlMainForm.Splitter1.Visible)
    controlMainForm.Panel4.Visible    = not(controlMainForm.Panel4.Visible)
    controlMainForm.Panel5.Visible    = not(controlMainForm.Panel5.Visible)
end

addCompactMenu()
cycleFullCompact(nil)

T_Null = "None"
T_Equip = "Equip: "
T_ModPosHead = "Head: "
T_ModPosHandle = "Handle: "
T_ModPosGrip = "Grip: "
T_ModPosToy = "Toy: "

function SetLanguage_ch()
    PackEdit.caption =  "背包编辑器"
    PackEdit_BAllDataUpdate.caption = "刷新背包与物品数据"
    PackEdit_BBaseItemUpdate.caption = "刷新物品数据"
    PackEdit_BBackpackItemUpdate.caption = "刷新背包数据"
    PackEdit_TWeapTabSheet.caption = "武器类"
    PackEdit_TItemTabSheet.caption = "材料类"
    PackEdit_TabSheet3.caption = "属性"
    PackEdit_TabSheet4.caption = "替换"
    PackEdit_CELabel1.caption = "耐久度"
    PackEdit_CELabel4.caption = "数量"
    PackEdit_CELabel5.caption = "品质"
    PackEdit_EWeapQual.hint = "0-6"
    PackEdit_BEditWeapApply.caption = "修改"
    PackEdit_CEGroupBox1.caption = "蓝图与插槽升级配件"
    PackEdit_CELabel2.caption = "使用蓝图属性"
    PackEdit_CBBPWeapMod.text = "无"
    PackEdit_CELabel9.caption = "在替换表中搜索:"
    PackEdit_EWeapModSearch.texthint = "搜索代码名称"
    PackEdit_EWeapModSearch.hint = "搜索"
    PackEdit_CWeapUseModTable.caption = "替换表仅显示原版蓝图/升级配件"
    PackEdit_BWeapModSearch.caption = "搜索"
    PackEdit_GWeapSlot.caption = "插槽升级配件"
    PackEdit_BWeapSlotsModUpdate.caption = "刷新"
    PackEdit_CELabel11.caption = "配件"
    PackEdit_CBWeapSlotsMod.text = "空"
    PackEdit_BWeapSlotsModSwap.caption = "修改"
    PackEdit_GWeapSeed.caption = "属性生成种子"
    PackEdit_CELabel3.caption = "额外词缀数量"
    PackEdit_CELabel7.caption = "伤害强度"
    PackEdit_CELabel10.caption = "词缀生成种子"
    PackEdit_CWeapSeedStrongWeapon.caption = "强力武器"
    PackEdit_CWeapSeedNoDmg.caption = "无伤害"
    PackEdit_BSeedWeapApply.caption = "修改"
    PackEdit_CELabel8.caption = "搜索:"
    PackEdit_EWeapSwapSearch.texthint = "搜索代码名称"
    PackEdit_EWeapSwapSearch.hint = "搜索"
    PackEdit_BWeapSwapSearch.caption = "搜索"
    PackEdit_BWeapSwap.caption = "替换"
    PackEdit_CheckBWeapUseInherit.caption = "基础数据是继承自其他物品"
    PackEdit_CELabel13.caption = "数据继承自物品: "
    PackEdit_CBWeapInheritBaseItem.text = "无"
    PackEdit_BWeapUseInherit.caption = "应用"
    PackEdit_TabSheet1.caption = "属性"
    PackEdit_BEditItemApply.caption = "修改"
    PackEdit_CheckBItemUseInherit.caption = "基础数据是继承自其他物品"
    PackEdit_CELabel21.caption = "数据继承自物品: "
    PackEdit_CBItemInheritBaseItem.text = "无"
    PackEdit_CELabel6.caption = "数量"
    PackEdit_BItemUseInherit.caption = "应用"
    PackEdit_CELabel20.caption = "搜索:"
    PackEdit_EItemSwapSearch.texthint = "搜索代码名称"
    PackEdit_EItemSwapSearch.hint = "搜索"
    PackEdit_BItemSwapSearch.caption = "搜索"
    PackEdit_BItemSwap.caption = "替换"
    PackEdit_CELabel12.caption = "额外词缀数量"
    PackEdit_CELabel14.caption = "词缀生成种子"
    PackEdit_EItemAffixesNum.hint = "0-6, 当为7时词缀生效数量为1"
    PackEdit_TCraftTabSheet.caption = "收集品与蓝图"
    PackEdit_CELabel15.caption = "搜索:"
    PackEdit_ECraftSwapSearch.texthint = "搜索代码名称"
    PackEdit_ECraftSwapSearch.hint = "搜索"
    PackEdit_BCraftSwapSearch.caption = "搜索"
    PackEdit_BCraftAdd.caption = "添加"
    PackEdit_BCraftSwap.caption = "替换"
    PackEdit_BCraftDel.caption = "删除"
    PackEdit_CEditStorage.caption = "编辑仓库物品"
    T_Null = "空"
    T_Equip = "已装备："
    T_ModPosHead = "尖端: "
    T_ModPosHandle = "柄部: "
    T_ModPosGrip = "握把: "
    T_ModPosToy = "饰物: "
    T_MainScriptDesc = "背包编辑器"
    T_EditFormScriptDesc = "显示编辑器窗口"
    T_LangFormScriptDesc = "语言"
    T_UpdateBaseDataNullPtrMsg = "刷新 物品 数据失败，请先在背包内更换装备后尝试更新。"
    T_UpdatePackDataNullPtrMsg = "刷新 背包 数据失败，请先在背包内更换装备后尝试更新。"
    T_EnterNumError = "请输入数字值。"
    addrlist = getAddressList()
    addrlist.getMemoryRecordByID(1).setDescription(T_MainScriptDesc)
    addrlist.getMemoryRecordByID(2).setDescription(T_EditFormScriptDesc)
    addrlist.getMemoryRecordByID(3).setDescription(T_LangFormScriptDesc)
end
function SetLanguage_en()
    PackEdit.caption =  "Pack Edit"
    PackEdit_BAllDataUpdate.caption = "Update all items"
    PackEdit_BBaseItemUpdate.caption = "Update swap items"
    PackEdit_BBackpackItemUpdate.caption = "Update pack items"
    PackEdit_TWeapTabSheet.caption = "Weapons"
    PackEdit_TItemTabSheet.caption = "Items"
    PackEdit_TabSheet3.caption = "Editor"
    PackEdit_TabSheet4.caption = "Swapper"
    PackEdit_CELabel1.caption = "Durability"
    PackEdit_CELabel4.caption = "Quantity / Ammo Load"
    PackEdit_CELabel5.caption = "Quality"
    PackEdit_EWeapQual.hint = "0-6"
    PackEdit_BEditWeapApply.caption = "Apply"
    PackEdit_CEGroupBox1.caption = "Blueprint and upgrade part"
    PackEdit_CELabel2.caption = "Current blueprint"
    PackEdit_CBBPWeapMod.text = "None"
    PackEdit_CELabel9.caption = "Search in swaplist:"
    PackEdit_EWeapModSearch.texthint = "Search item name"
    PackEdit_EWeapModSearch.hint = "Search"
    PackEdit_CWeapUseModTable.caption = "Swaplist only displays the original blueprint/upgrade"
    PackEdit_BWeapModSearch.caption = "Search"
    PackEdit_GWeapSlot.caption = "Slots upgrade parts"
    PackEdit_BWeapSlotsModUpdate.caption = "Update"
    PackEdit_CELabel11.caption = "Current upgrade part"
    PackEdit_CBWeapSlotsMod.text = "None"
    PackEdit_BWeapSlotsModSwap.caption = "Apply"
    PackEdit_GWeapSeed.caption = "Spawn Seed"
    PackEdit_CELabel3.caption = "Extra Affixes"
    PackEdit_CELabel7.caption = "Damage Level"
    PackEdit_CELabel10.caption = "Affixes Seed"
    PackEdit_CWeapSeedStrongWeapon.caption = "Strong Weapon"
    PackEdit_CWeapSeedNoDmg.caption = "No Damage"
    PackEdit_BSeedWeapApply.caption = "Apply"
    PackEdit_CELabel8.caption = "Search:"
    PackEdit_EWeapSwapSearch.texthint = "Search item name"
    PackEdit_EWeapSwapSearch.hint = "Search"
    PackEdit_BWeapSwapSearch.caption = "Search"
    PackEdit_BWeapSwap.caption = "Swap"
    PackEdit_CheckBWeapUseInherit.caption = "The item basic data inherited from other items"
    PackEdit_CELabel13.caption = "Property inherited from:"
    PackEdit_CBWeapInheritBaseItem.text = "None"
    PackEdit_BWeapUseInherit.caption = "Apply"
    PackEdit_TabSheet1.caption = "Editor"
    PackEdit_BEditItemApply.caption = "Apply"
    PackEdit_CheckBItemUseInherit.caption = "The item basic data inherited from other items"
    PackEdit_CELabel21.caption = "Property inherited from:"
    PackEdit_CBItemInheritBaseItem.text = "None"
    PackEdit_CELabel6.caption = "Quantity"
    PackEdit_BItemUseInherit.caption = "Apply"
    PackEdit_CELabel20.caption = "Search:"
    PackEdit_EItemSwapSearch.texthint = "Search item name"
    PackEdit_EItemSwapSearch.hint = "Search"
    PackEdit_BItemSwapSearch.caption = "Search"
    PackEdit_BItemSwap.caption = "Swap"
    PackEdit_CELabel12.caption = "Extra Affixes"
    PackEdit_CELabel14.caption = "Affixes Seed"
    PackEdit_EItemAffixesNum.hint = "0-6. When it is 7, the effective number of affixes is 1"
    PackEdit_TCraftTabSheet.caption = "Collecables"
    PackEdit_CELabel15.caption = "Search:"
    PackEdit_ECraftSwapSearch.texthint = "Search item name"
    PackEdit_ECraftSwapSearch.hint = "Search"
    PackEdit_BCraftSwapSearch.caption = "Search"
    PackEdit_BCraftAdd.caption = "Add"
    PackEdit_BCraftSwap.caption = "Swap"
    PackEdit_BCraftDel.caption = "Delete"
    PackEdit_CEditStorage.caption = "Edit storage items"
    T_Null = "None"
    T_Equip = "Equip: "
    T_ModPosHead = "Head: "
    T_ModPosHandle = "Handle: "
    T_ModPosGrip = "Grip: "
    T_ModPosToy = "Toy: "
    T_MainScriptDesc = "Pack Editor"
    T_EditFormScriptDesc = "Show Form"
    T_LangFormScriptDesc = "Language"
    T_UpdateBaseDataNullPtrMsg = "Failed to refresh item data. Please replace equipment in your backpack before attempting to update."
    T_UpdatePackDataNullPtrMsg = "Failed to refresh backpack data. Please replace equipment in your backpack before attempting to update."
    T_EnterNumError = "Please input a number."
    addrlist = getAddressList()
    addrlist.getMemoryRecordByID(1).setDescription(T_MainScriptDesc)
    addrlist.getMemoryRecordByID(2).setDescription(T_EditFormScriptDesc)
    addrlist.getMemoryRecordByID(3).setDescription(T_LangFormScriptDesc)
end

BaseItemTable = {}
BaseItemCpyTableWeap = {}
BaseItemCpyTableItem = {}
BaseItemCpyTableCraft = {}
ModTable = {}
ModCpyTable = {} --onle one enough
ItemTable = {}
WeaponTable = {}
CraftplanTable = {}
CraftplanAddr = 0
SlotsModTable = {}
SlotsModAddr = 0
ItemSeed = 0

--[[
string Dec2Hex(number NumberDecNum)
--]]
function Dec2Hex(NumberDecNum)
    return string.format("%X", 0+NumberDecNum)
end

--[[
number Hex2Dec(string StringHexNum)
--]]
function Hex2Dec(StringHexNum)
    return tonumber(StringHexNum, 16)
end

--[[
table SearchTableMemberName(string SearchStr, table SearchTable)
Search table[].Name
Return table{[Name == SearchStr ...]...}
--]]
function SearchTableMemberName(SearchStr, SearchTable)
    local ReturnTable = {}
    for k ,v in pairs(SearchTable) do
        if string.find(v.Name, SearchStr) then
           table.insert(ReturnTable, v)
        end
    end
    return ReturnTable
end

function GetBaseItemData()
    BaseItemTable = {}
    ModTable = {}
    local ItemTotalCount = readInteger("BaseItemData+8")
    if ItemTotalCount == 0 or nil then
        showMessage(T_UpdateBaseDataNullPtrMsg)
        return false
    end
    local BaseItemGroup = readQword("BaseItemData")
    for i = 0, ItemTotalCount - 1 do
        local ItemAddr = readQword(BaseItemGroup + i * 8)
        local ItemString = readString(bAnd(readQword(ItemAddr + 0x8), 0x00FFFFFFFFFFFF))
        if ItemString then
            if string.find(ItemString, "Mod") or string.find(ItemString, "Craftplan_") then
                table.insert(ModTable,{Address = ItemAddr, Name = ItemString, MemIndex = i})
            end
            table.insert(BaseItemTable,{Address = ItemAddr, Name = ItemString, MemIndex = i})
        end
    end
    return true
end

function GetBPWeapData(BaseBackPackAddr)--"ItemEditData"
    local function GetData(Pack)
        local Count = readInteger(Pack + 8)
        if Count == 0 or Count &gt; 65535 then return end
        Pack = bAnd(readQword(Pack), 0x00FFFFFFFFFFFF)
        local TempTable = {}
        for i = 0,Count - 1 do
            local WeapAddr = readQword(Pack + i * 8)
            local WeapString = readString(bAnd(readQword(readQword(WeapAddr + 0x48) + 0x8), 0x00FFFFFFFFFFFF))
            --local EquipFlag = bAnd(readBytes(WeapAddr + 0x188), 4) --inaccurate
            local EquipFlag
            if readBytes(WeapAddr + 0x192) &gt; 3 then
                EquipFlag = 0
            else
                EquipFlag = 4
            end
            local ItemIndex = readQword(readQword(WeapAddr + 0x48) + 0x40)
            table.insert(TempTable,{Name = WeapString, Address = WeapAddr, Equip = EquipFlag, ID = ItemIndex})
        end
        table.sort(TempTable,function(a, b) return a.ID &lt; b.ID end)--by id
        --table.sort(TempTable,function(a, b) return a.Equip &gt;= b.Equip end)--by equip
        for k,v in pairs(TempTable) do
            table.insert(WeaponTable,{Name = v.Name, Address = v.Address, Equip = v.Equip})
        end
    end
    WeaponTable = {}
    local WeapPack = readQword(readQword(BaseBackPackAddr + 0x58) + 0x50)+ 0x38
    local PropPack = readQword(readQword(BaseBackPackAddr + 0x58) + 0x48)+ 0x38
    local ConsPack = readQword(readQword(BaseBackPackAddr + 0x58) + 0x40)+ 0x38
    local SpecPack = readQword(BaseBackPackAddr + 0x68)+ 0x38
    GetData(WeapPack)
    GetData(PropPack)
    GetData(ConsPack)
    GetData(SpecPack)
end

function GetBPItemData(BaseBackPackAddr)--"ItemEditData"
    local function GetData(Pack)
        local Count = readInteger(Pack + 8)
        if Count == 0 or Count &gt; 65535 then return end
        Pack = bAnd(readQword(Pack), 0x00FFFFFFFFFFFF)
        local TempTable = {}
        for i = 0, Count - 1 do
            local ItemAddr = readQword(Pack + i * 8)
            local ItemString = readString(bAnd(readQword(readQword(ItemAddr + 0x48) + 0x8), 0x00FFFFFFFFFFFF))
            local ItemID = readInteger(readQword(ItemAddr + 0x48) + 0x40)
            table.insert(TempTable, {Name = ItemString ,Address = ItemAddr, ItemIndex = ItemID})
        end
        table.sort(TempTable,function(a, b) return a.ItemIndex &lt; b.ItemIndex end)
        for k,v in pairs(TempTable) do
            table.insert(ItemTable,{Name = v.Name, Address = v.Address, ItemIndex = v.ItemIndex})
        end
    end
    ItemTable = {}
    local ItemPack = readQword(BaseBackPackAddr + 0x60) + 0x38
    local AmmoPack = readQword(BaseBackPackAddr + 0x40) + 0x38
    local TokenPack = readQword(BaseBackPackAddr + 0x78) + 0x38
    GetData(ItemPack)
    GetData(AmmoPack)
    GetData(TokenPack)
end

function GetBPCraftData(BaseBackPackAddr)--"ItemEditData"
    CraftplanTable = {}
    CraftplanAddr = 0
    local CollectablePack = readQword(BaseBackPackAddr + 0x48) + 0x38
    CraftplanAddr = CollectablePack
    local Count = readInteger(CollectablePack + 8)
    if Count == 0 or Count &gt; 65535 then return end
    CollectablePack = bAnd(readQword(CollectablePack), 0x00FFFFFFFFFFFF)
    if CollectablePack == 0 then return end
    for i = 0, Count - 1 do
        local ItemAddr = CollectablePack + i * 8
        local ItemID = readInteger(ItemAddr)
        local ItemString
        if ItemID == 0 then
            ItemString = T_Null
            goto SetCraftplanContinue
        end
        if #BaseItemTable == 0 then
            if not GetBaseItemData() then return end
        end
        ItemString = BaseItemTable[ItemID + 1].Name
        ::SetCraftplanContinue::
        table.insert(CraftplanTable, {Name = ItemString ,Address = ItemAddr, ItemIndex = ItemID})
    end
    table.sort(CraftplanTable,function(a, b) return a.ItemIndex &lt; b.ItemIndex end)
end

function GetBackpackData(BaseBackPackAddr)
    GetBPWeapData(BaseBackPackAddr)
    GetBPItemData(BaseBackPackAddr)
    GetBPCraftData(BaseBackPackAddr)
end

--[[
SetBaseItemCpyTable(string SetTable,
                    sender senderEModSearch,
                    sender senderLBSwap,
                    sender senderCBInheritBaseItem)
Reset or search copy table
SetTable:
         "W": BaseItemCpyTableWeap
         "I": BaseItemCpyTableItem
         "C": BaseItemCpyTableCraft
--]]
function SetBaseItemCpyTable(SetTable, senderEModSearch, senderLBSwap, senderCBInheritBaseItem)
    local SearchStr = senderEModSearch.text
    local TableTempErgodic = {}
    if SetTable == "W" then
        if SearchStr ~= "" then
            BaseItemCpyTableWeap = SearchTableMemberName(SearchStr, BaseItemTable)
            TableTempErgodic = BaseItemCpyTableWeap
        else
            BaseItemCpyTableWeap = BaseItemTable
            TableTempErgodic = BaseItemTable
        end
    elseif SetTable == "I" then
        if SearchStr ~= "" then
            BaseItemCpyTableItem = SearchTableMemberName(SearchStr, BaseItemTable)
            TableTempErgodic = BaseItemCpyTableItem
        else
            BaseItemCpyTableItem = BaseItemTable
            TableTempErgodic = BaseItemTable
        end
    elseif SetTable == "C" then
        if SearchStr ~= "" then
            BaseItemCpyTableCraft = SearchTableMemberName(SearchStr, BaseItemTable)
            TableTempErgodic = BaseItemCpyTableCraft
        else
            BaseItemCpyTableCraft = BaseItemTable
            TableTempErgodic = BaseItemTable
        end
    else
        showMessage("Lua script error.\r\nWrong parameter: \"SetTable\" \r\nCall function: SetBaseItemCpyTable(string SetTable,sender, sender, sender)")
        return
    end
    senderLBSwap.visible = false
    senderLBSwap.clear()
    local SwapList = senderLBSwap.getItems()
    senderCBInheritBaseItem.visible = false
    senderCBInheritBaseItem.clear()
    local InheritList = senderCBInheritBaseItem.getItems()
    InheritList.add(T_Null)
    senderCBInheritBaseItem.setItemIndex(0)
    for k,v in pairs(TableTempErgodic) do
        SwapList.add(v.Name)
        InheritList.add(v.Name)
    end
    senderCBInheritBaseItem.visible = true
    senderLBSwap.visible = true
end

function ResetModCpyTable(senderCUseModTab, senderEModSearch)
    if senderCUseModTab.Checked then
        ModCpyTable = ModTable
    else
        ModCpyTable = BaseItemTable
    end
    local SearchStr = senderEModSearch.text
    if SearchStr ~= "" then
        ModCpyTable = SearchTableMemberName(SearchStr, ModCpyTable)
    end
end

function SetModCpyTable(senderCUseModTab, senderEModSearch, senderCBBPMod, senderCBSlotsMod)
    ResetModCpyTable(senderCUseModTab, senderEModSearch)
    senderCBSlotsMod.visible = false
    senderCBSlotsMod.clear()
    local SlotsModList = senderCBSlotsMod.getItems()
    SlotsModList.add(T_Null)
    senderCBSlotsMod.setItemIndex(0)
    senderCBBPMod.visible = false
    senderCBBPMod.clear()
    local ModList = senderCBBPMod.getItems()
    ModList.add(T_Null)
    senderCBBPMod.setItemIndex(0)
    for k,v in pairs(ModCpyTable) do
        SlotsModList.add(v.Name)
        ModList.add(v.Name)
    end
    senderCBSlotsMod.visible = true
    senderCBBPMod.visible = true

end

function BaseItemUpdate()
    GetBaseItemData()
    if PackEdit_PCMainPageControl.ActivePage == PackEdit_TWeapTabSheet then
        SetModCpyTable(PackEdit_CWeapUseModTable, PackEdit_EWeapModSearch, PackEdit_CBBPWeapMod, PackEdit_CBWeapSlotsMod)
        SetBaseItemCpyTable("W", PackEdit_EWeapSwapSearch, PackEdit_LBWeapSwap, PackEdit_CBWeapInheritBaseItem)
    elseif PackEdit_PCMainPageControl.ActivePage == PackEdit_TItemTabSheet then
        SetBaseItemCpyTable("I", PackEdit_EItemSwapSearch, PackEdit_LBItemSwap, PackEdit_CBItemInheritBaseItem)
    elseif PackEdit_PCMainPageControl.ActivePage == PackEdit_TCraftTabSheet then
        SetBaseItemCpyTable("C", PackEdit_ECraftSwapSearch, PackEdit_LBCraftSwap, PackEdit_CBParameterHide)
    else
        return --nothing
    end
end

--[[
BackpackItemUpdate(string Option)
Update backpack item
Option:
         "W": Weapon
         "I": Item
         "C": Craftplan
         "A": All
--]]
function BackpackItemUpdate(Option)
    if readQword("ItemEditData") == nil then
        showMessage(T_UpdatePackDataNullPtrMsg)
        return
    end
    local function WeaponUpdate()
        PackEdit_LBWeapList.visible = false
        PackEdit_LBWeapList.clear()
        local WeapList = PackEdit_LBWeapList.getItems()
        for k,v in pairs(WeaponTable) do
            local Name
            if v.Equip == 4 then
                Name = T_Equip..v.Name
                WeapList.add(Name)
            else
                Name = v.Name
                WeapList.add(Name)
            end
        end
        PackEdit_LBWeapList.visible = true
        PackEdit_LBWeapSlotsModList.clear()
    end
    local function ItemUpdate()
        PackEdit_LBItemList.visible = false
        PackEdit_LBItemList.clear()
        local ItemList = PackEdit_LBItemList.getItems()
        for k,v in pairs(ItemTable) do
            ItemList.add(v.Name)
        end
        PackEdit_LBItemList.visible = true
    end
    local function CraftUpdate()
        PackEdit_LBCraftList.visible = false
        PackEdit_LBCraftList.clear()
        local CraftList = PackEdit_LBCraftList.getItems()
        for k,v in pairs(CraftplanTable) do
            CraftList.add(v.Name)
        end
        PackEdit_LBCraftList.visible = true
    end
    local InventoryContainer = PackEdit_CEditStorage.Checked and readQword( readQword("ItemEditData") + 0x10 ) or readQword( readQword("ItemEditData") + 0x8 )
    if Option == "W" then
        GetBPWeapData(InventoryContainer)
        WeaponUpdate()
    elseif Option == "I" then
        GetBPItemData(InventoryContainer)
        ItemUpdate()
    elseif Option == "C" then
        GetBPCraftData(InventoryContainer)
        CraftUpdate()
    elseif Option == "A" then
        GetBackpackData(InventoryContainer)
        WeaponUpdate()
        ItemUpdate()
        CraftUpdate()
    else
        showMessage("Lua script error.\r\nWrong parameter: \"Option\" \r\nCall function: BackpackItemUpdate(string Option)")
        return
    end
end

function GetItemSlotsMod(senderTotalList)
    if senderTotalList.ItemIndex == -1 then list.clear() end
    SlotsModTable = {}
    local ModPos = {T_ModPosHead, T_ModPosHandle, T_ModPosGrip, T_ModPosToy}
    for i = 0, 3 do
        local SlotAddr =  bAnd(readQword(SlotsModAddr), 0x00FFFFFFFFFFFF) + 0x8 + i * 0xD0
        if readQword(SlotAddr) == 0 then
            table.insert(SlotsModTable, {Index = i, Name = ModPos[i + 1]..T_Null, Address = SlotAddr})
        else
        local ModString = readString(bAnd(readQword(readQword(SlotAddr) + 0x8), 0x00FFFFFFFFFFFF))
            table.insert(SlotsModTable, {Index = i, Name = ModPos[i + 1]..ModString, Address = SlotAddr})
        end
    end
end

function SlotsModUpdate(senderSlotsModList, senderTotalList, senderWeapSlotsMod)
    GetItemSlotsMod(senderTotalList)
    senderSlotsModList.visible = false
    senderSlotsModList.clear()
    local SlotsModList = senderSlotsModList.getItems()
    for k, v in pairs(SlotsModTable) do
        SlotsModList.add(v.Name)
    end
    senderWeapSlotsMod.setItemIndex(0)
    senderSlotsModList.visible = true
end

--[[
boolean SlotsModFunc(sender senderSlotsModList,
                              sender senderCBSlotsMod,
                              sender senderTotalList,
                              sender senderWeapSlotsMod)
Modify slots mod &amp; update
--]]
function SlotsModFunc(senderSlotsModList, senderCBSlotsMod, senderTotalList, senderWeapSlotsMod)
    if senderTotalList.ItemIndex == -1 or senderSlotsModList.ItemIndex == -1 then return end
    if senderCBSlotsMod.ItemIndex == -1 then return end
    local SlotAddr = SlotsModTable[senderSlotsModList.getItemIndex() + 1].Address
    local SwapIndex = senderCBSlotsMod.getItemIndex()
    if SwapIndex == 0 then
        writeQword(SlotAddr, 0)
    else
        writeQword(SlotAddr, ModCpyTable[SwapIndex].Address)
    end
    SlotsModUpdate(senderSlotsModList, senderTotalList, senderWeapSlotsMod)
end

function SeedFunc(FuncExec)
    local function GetSeed()
        local ExtraAffixesNumSeed = bAnd(ItemSeed,0xF)
        local DamageLevel = bShr(bAnd(ItemSeed,0xF0), 4)
        local StrongWeapon = bShr(bAnd(ItemSeed,0x100), 8)
        local NoDamage = bShr(bAnd(ItemSeed,0x200), 9)
        local AffixesSeed = bShr(ItemSeed, 13)
        PackEdit_EWeapSeedAffixesNum.text = ExtraAffixesNumSeed
        PackEdit_EWeapSeedDamageLevel.text = DamageLevel
        PackEdit_CWeapSeedStrongWeapon.state = StrongWeapon
        PackEdit_CWeapSeedNoDmg.state = NoDamage
        PackEdit_EWeapSeedAffixesSeed.text = AffixesSeed
    end
    local function SetSeed()
        local ExtraAffixesNumSeed = tonumber(PackEdit_EWeapSeedAffixesNum.text)
        local DamageLevel = tonumber(PackEdit_EWeapSeedDamageLevel.text)
        local StrongWeapon = tonumber(PackEdit_CWeapSeedStrongWeapon.state)
        local NoDamage = tonumber(PackEdit_CWeapSeedNoDmg.state)
        local AffixesSeed = tonumber(PackEdit_EWeapSeedAffixesSeed.text)
        if StrongWeapon == 1 and DamageLevel &gt; 12 then
            DamageLevel = 12
        end
        if AffixesSeed &gt; 524827 then
            AffixesSeed = 524827
        end
        DamageLevel = bShl(DamageLevel, 4)
        StrongWeapon = bShl(StrongWeapon, 8)
        NoDamage = bShl(NoDamage, 9)
        AffixesSeed = bShl(AffixesSeed, 13)
        local Qual = bAnd(ItemSeed,0x1C00) --Apply in main group
        ItemSeed = ExtraAffixesNumSeed + DamageLevel + StrongWeapon + NoDamage + Qual + AffixesSeed
    end
    if FuncExec == "Get" then
        GetSeed()
    elseif FuncExec == "Set" then
        SetSeed()
        local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex + 1]
        writeInteger(Weapon.Address + 0x50, ItemSeed)
    end
end

--Window control
function BAllDataUpdateClick(sender)
    BaseItemUpdate()
    BackpackItemUpdate("A")
end

function BBaseItemUpdateClick(sender)
    BaseItemUpdate()
end

function BBackpackItemUpdateClick(sender)
    BackpackItemUpdate("A")
end

function LBWeapListSelectionChange(sender, user)
    if sender.ItemIndex == -1 then return end
    local Weapon = WeaponTable[sender.ItemIndex + 1]
    local Quant = readInteger(Weapon.Address + 0x10)
    local InheritItem = readQword(Weapon.Address + 0x58)
    local Mod = readQword(Weapon.Address + 0x60)
    local Dura = readFloat(Weapon.Address + 0xE8)
    SlotsModAddr = Weapon.Address + 0x28
    ItemSeed = readInteger(Weapon.Address + 0x50)
    local Qual = bShr(bAnd(ItemSeed,0x1C00), 10)
    PackEdit_EWeapDur.text = Dura
    PackEdit_EWeapQuant.text = Quant
    PackEdit_EWeapQual.text = Qual
    for k, v in pairs(ModCpyTable) do
        if v.Address == Mod then
            PackEdit_CBBPWeapMod.setItemIndex(k)
            break
        else
            PackEdit_CBBPWeapMod.setItemIndex(0)
        end
    end
    for k,v in pairs(BaseItemCpyTableWeap) do
        if v.Name == Weapon.Name then
            PackEdit_LBWeapSwap.setItemIndex(k - 1)
            break
        else
            PackEdit_LBWeapSwap.setItemIndex(-1)
        end
    end
    if InheritItem == 0 then
        PackEdit_CheckBWeapUseInherit.setState(false)
        PackEdit_CBWeapInheritBaseItem.setEnabled(false)
        PackEdit_CBWeapInheritBaseItem.setItemIndex(0)
    else
        PackEdit_CheckBWeapUseInherit.setState(1)
        PackEdit_CBWeapInheritBaseItem.setEnabled(true)
        for k, v in pairs(BaseItemCpyTableWeap) do
            if v.Address == InheritItem then
                PackEdit_CBWeapInheritBaseItem.setItemIndex(k)
                break
            else
                PackEdit_CBWeapInheritBaseItem.setItemIndex(0)
            end
        end
    end
    if bAnd(readQword(SlotsModAddr), 0x00FFFFFFFFFFFF) ~= 0 then
        PackEdit_GWeapSlot.setEnabled(true)
        PackEdit_GWeapSeed.setEnabled(true)
        SlotsModUpdate(PackEdit_LBWeapSlotsModList, PackEdit_LBWeapList, PackEdit_CBWeapSlotsMod)
        SeedFunc("Get")
    else
        PackEdit_LBWeapSlotsModList.clear()
        PackEdit_GWeapSlot.setEnabled(false)
        PackEdit_GWeapSeed.setEnabled(false)
    end
end

function BEditWeapApplyClick(sender)
    if PackEdit_LBWeapList.ItemIndex == -1 then return end
    local ModIndex = PackEdit_CBBPWeapMod.getItemIndex()
    local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex + 1]
    local Dura = tonumber(PackEdit_EWeapDur.text)
    local Quant = tonumber(PackEdit_EWeapQuant.text)
    local Qual = tonumber(PackEdit_EWeapQual.text)
    if Dura == nil or Quant == nil then
        showMessage(T_EnterNumError)
        return
    end
    if Qual &gt; 6 then Qual = 6 end
    ItemSeed = bAnd(ItemSeed,0xFFFFE3FF) + bShl(Qual, 10)
    writeFloat(Weapon.Address + 0xE8, Dura)
    writeInteger(Weapon.Address + 0x10, Quant)
    writeInteger(Weapon.Address + 0x50, ItemSeed)
    if ModIndex == 0 then
        writeQword(Weapon.Address + 0x60, 0)
    else
        writeQword(Weapon.Address + 0x60, ModCpyTable[ModIndex].Address)
    end
end

function BWeapModSearchClick(sender)
    SetModCpyTable(PackEdit_CWeapUseModTable, PackEdit_EWeapModSearch, PackEdit_CBBPWeapMod, PackEdit_CBWeapSlotsMod, PackEdit_CBWeapAddSlotsMod)
end

function CWeapUseModTableChange(sender)
    SetModCpyTable(PackEdit_CWeapUseModTable, PackEdit_EWeapModSearch, PackEdit_CBBPWeapMod, PackEdit_CBWeapSlotsMod, PackEdit_CBWeapAddSlotsMod)
end

function LBWeapSlotsModListSelectionChange(sender, user)
    if sender.ItemIndex == -1 then return end
    local SlotsAddr = SlotsModTable[PackEdit_LBWeapSlotsModList.ItemIndex + 1]
    local ModAddr = readQword(SlotsAddr.Address)
    if ModAddr == 0 then PackEdit_CBWeapSlotsMod.setItemIndex(0) return end
    for k, v in pairs(ModCpyTable) do
        if v.Address == ModAddr then
            PackEdit_CBWeapSlotsMod.setItemIndex(k)
            break
        end
    end
end

function BWeapSlotsModSwapApply(sender)
    SlotsModFunc(PackEdit_LBWeapSlotsModList, PackEdit_CBWeapSlotsMod, PackEdit_LBWeapList, PackEdit_CBWeapSlotsMod)
end

function BWeapSlotsModUpdateClick(sender)
    SlotsModUpdate(PackEdit_LBWeapSlotsModList, PackEdit_LBWeapList, PackEdit_CBWeapSlotsMod)
end

function BWeapSwapSearchClick(sender)
    SetBaseItemCpyTable("W", PackEdit_EWeapSwapSearch, PackEdit_LBWeapSwap, PackEdit_CBWeapInheritBaseItem)
end

function BWeapSwapClick(sender)
    if PackEdit_LBWeapSwap.ItemIndex == -1 or PackEdit_LBWeapList.ItemIndex == -1 then return end
    local SwapIndex = PackEdit_LBWeapSwap.getItemIndex() + 1
    local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex + 1]
    writeQword(Weapon.Address + 0x48, BaseItemCpyTableWeap[SwapIndex].Address)
    BackpackItemUpdate("W")
end

function CheckBWeapUseInheritChange(sender)
    if sender.Checked then
        PackEdit_CBWeapInheritBaseItem.setEnabled(true)
    else
        PackEdit_CBWeapInheritBaseItem.setEnabled(false)
    end
end

function BWeapUseInheritClick(sender)
    if sender.ItemIndex == -1 then return end
    local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex + 1]
    local function NotInherit()
        writeQword(Weapon.Address + 0x58, 0)
        writeInteger(Weapon.Address + 0x110, -1)
        PackEdit_CBWeapInheritBaseItem.setEnabled(false)
        PackEdit_CheckBWeapUseInherit.setState(false)
    end
    if PackEdit_CheckBWeapUseInherit.Checked then
        local InheritIndex = PackEdit_CBWeapInheritBaseItem.getItemIndex()
        if InheritIndex == -1 then
            NotInherit()
            return
        end
        writeQword(Weapon.Address + 0x58, BaseItemCpyTableWeap[InheritIndex].Address)
        writeInteger(Weapon.Address + 0x110, BaseItemCpyTableWeap[InheritIndex].MemIndex)
        return
    else
        NotInherit()
        return
    end
end

function BSeedWeapApplyClick(sender)
    SeedFunc("Set")
end

function LBItemListSelectionChange(sender, user)
    if sender.ItemIndex == -1 then return end
    local Item = ItemTable[sender.ItemIndex+1]
    local Quant = readInteger(Item.Address+0x10)
    local AffixesSeed = readInteger(Item.Address + 0x50)
    local InheritItem = readQword(Item.Address + 0x58)
    local AffixesNum = bShr(bAnd(AffixesSeed,0x1C00), 10)
    PackEdit_EItemQuant.text = Quant
    PackEdit_EItemAffixesNum.text = AffixesNum
    PackEdit_EItemAffixesSeed.text = AffixesSeed
    for k,v in pairs(BaseItemCpyTableItem) do
        if v.Name == Item.Name then
            PackEdit_LBItemSwap.setItemIndex(k - 1)
            break
        else
            PackEdit_LBItemSwap.setItemIndex(-1)
        end
    end
    if InheritItem == 0 then
        PackEdit_CheckBItemUseInherit.setState(false)
        PackEdit_CBItemInheritBaseItem.setEnabled(false)
        PackEdit_CBItemInheritBaseItem.setItemIndex(0)
    else
        PackEdit_CheckBItemUseInherit.setState(1)
        PackEdit_CBItemInheritBaseItem.setEnabled(true)
        for k, v in pairs(BaseItemCpyTableItem) do
            if v.Address == InheritItem then
                PackEdit_CBItemInheritBaseItem.setItemIndex(k)
                break
            else
                PackEdit_CBItemInheritBaseItem.setItemIndex(0)
            end
        end
    end
end

function BItemApplyClick(sender)
    if PackEdit_LBItemList.ItemIndex == -1 then return end
    local Item = ItemTable[PackEdit_LBItemList.ItemIndex + 1]
    local Quant = tonumber(PackEdit_EItemQuant.text)
    local AffixesNum = tonumber(PackEdit_EItemAffixesNum.text)
    local AffixesSeed = tonumber(PackEdit_EItemAffixesSeed.text)
    if Quant == nil then
        showMessage(T_EnterNumError)
        return
    end
    if AffixesNum &gt; 7 then AffixesNum = 6 end
    AffixesSeed = bAnd(AffixesSeed,0xFFFFE3FF) + bShl(AffixesNum, 10)
    writeInteger(Item.Address + 0x10, Quant)
    writeInteger(Item.Address + 0x50, AffixesSeed)
end

function BItemSwapSearchClick(sender)
    SetBaseItemCpyTable("I", PackEdit_EItemSwapSearch, PackEdit_LBItemSwap, PackEdit_CBItemInheritBaseItem)
end

function BItemSwapClick(sender)
    if PackEdit_LBItemSwap.ItemIndex == -1 or PackEdit_LBItemList.ItemIndex == -1 then return end
    local SwapIndex = PackEdit_LBItemSwap.getItemIndex() + 1
    local Item = ItemTable[PackEdit_LBItemList.ItemIndex + 1]
    writeQword(Item.Address + 0x48, BaseItemCpyTableItem[SwapIndex].Address)
    BackpackItemUpdate("I")
end

function CheckBItemUseInheritChange(sender)
    if sender.Checked then
        PackEdit_CBItemInheritBaseItem.setEnabled(true)
    else
        PackEdit_CBItemInheritBaseItem.setEnabled(false)
    end
end

function BItemUseInheritClick(sender)
    if sender.ItemIndex == -1 then return end
    local Item = ItemTable[PackEdit_LBItemList.ItemIndex + 1]
    local function NotInherit()
        writeQword(Item.Address + 0x58, 0)
        writeInteger(Item.Address + 0x110, -1)
        PackEdit_CBItemInheritBaseItem.setEnabled(false)
        PackEdit_CheckBItemUseInherit.setState(false)
    end
    if PackEdit_CheckBItemUseInherit.Checked then
        local InheritIndex = PackEdit_CBItemInheritBaseItem.getItemIndex()
        if InheritIndex == -1 then
            NotInherit()
            return
        end
        writeQword(Item.Address + 0x58, BaseItemCpyTableItem[InheritIndex].Address)
        writeInteger(Item.Address + 0x110, BaseItemCpyTableItem[InheritIndex].MemIndex)
        return
    else
        NotInherit()
        return
    end
end

function BCraftSwapSearchClick(sender)
    SetBaseItemCpyTable("C", PackEdit_ECraftSwapSearch, PackEdit_LBCraftSwap, PackEdit_CBParameterHide)
end

function BCraftAddClick(sender)
    if PackEdit_LBCraftSwap.ItemIndex == -1 then return end
    local AddIndex = PackEdit_LBCraftSwap.getItemIndex() + 1
    local AddMem = bAnd(readQword(CraftplanAddr), 0x00FFFFFFFFFFFF) + readInteger(CraftplanAddr + 8) * 8
    if AddMem == 0 then return end
    writeInteger(AddMem, BaseItemCpyTableCraft[AddIndex].MemIndex)
    writeInteger(AddMem + 4, 257)
    writeInteger(CraftplanAddr + 8, readInteger(CraftplanAddr + 8) + 1)
    BackpackItemUpdate("C")
end

function BCraftSwapClick(sender)
    if PackEdit_LBCraftList.ItemIndex == -1 or PackEdit_LBCraftSwap.ItemIndex == -1 then return end
    local SwapIndex = PackEdit_LBCraftSwap.getItemIndex() + 1
    local Craftplan = CraftplanTable[PackEdit_LBCraftList.ItemIndex + 1].Address
    writeInteger(Craftplan, BaseItemCpyTableCraft[SwapIndex].MemIndex)
    BackpackItemUpdate("C")
end

function BCraftDelClick(sender)
    if PackEdit_LBCraftList.ItemIndex == -1 then return end
    local DelIndex = PackEdit_LBCraftList.getItemIndex() + 1
    writeInteger(CraftplanTable[DelIndex].Address, 0)
    writeInteger(CraftplanTable[DelIndex].Address + 4, 0)
    BackpackItemUpdate("C")
end

function BPEditorShow()
    PackEdit.show()
end

function BPEditorHide()
    PackEdit.close()
end

function PackEdit_FormShow(sender)
    BaseItemTable = {}
    BaseItemCpyTableWeap = {}
    BaseItemCpyTableItem = {}
    ModTable = {}
    ModCpyTable = {}
    ItemTable = {}
    WeaponTable = {}
    SlotsModTable = {}
    SlotsModAddr = 0
    ItemSeed = 0
end

function LanguageSwitch_Language_cnClick(sender)
    SetLanguage_ch()
    LanguageSwitch.close()
    getAddressList().getMemoryRecordByID(3).Active = false
end

function LanguageSwitch_Language_enClick(sender)
    SetLanguage_en()
    LanguageSwitch.close()
    getAddressList().getMemoryRecordByID(3).Active = false
end

if not readInteger("DyingLightGame_x64_rwdi.exe") then
   getAutoAttachList().add("DyingLightGame_x64_rwdi.exe")
end

LanguageSwitch.show()
SetLanguage_en()
</LuaScript>
</CheatTable>
